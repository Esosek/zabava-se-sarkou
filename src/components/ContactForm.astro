---
import 'flatpickr/dist/flatpickr.min.css';

import { getCollection } from 'astro:content';
import { getReservedDates } from '../server/calendar/events';

const services = await getCollection('services');

const reservedDates: any = await getReservedDates();
---

<form class="submit-form flow" method="POST">
  <div class="input-group">
    <div class="input-item">
      <input
        id="name"
        name="name"
        type="text"
        placeholder="Jméno"
        autocomplete="name"
        required
      />
    </div>
    <div class="input-item">
      <input
        id="email"
        name="email"
        type="email"
        placeholder="Email"
        autocomplete="email"
        required
      />
    </div>
  </div>

  <div class="input-item">
    <select id="service-select" name="service-select">
      <option value="zadny">Program</option>
      {
        services.map((service) => (
          <option value={service.slug}>{service.data.title}</option>
        ))
      }
    </select>
  </div>

  {
    !reservedDates.error && (
      <div id="date-location-group" class="input-group" style="display:none">
        <div class="input-item">
          <input
            id="datepicker"
            name="date"
            class="flatpickr flatpickr-input"
            type="text"
            placeholder="Vyberte datum"
            readonly="readonly"
          />
        </div>
        <div class="input-item">
          <input
            id="location-input"
            name="location"
            type="text"
            placeholder="Adresa"
          />
        </div>
      </div>
    )
  }
  <div class="input-item">
    <textarea id="message" name="message" placeholder="Zpráva" rows="8"
    ></textarea>
  </div>

  <div class="subscribe">
    <input id="subscribe" name="subscribe" type="checkbox" />
    <label for="subscribe"
      >Chci dostávat e-mailem novinky a upozornění na nové programy.</label
    >
  </div>

  <div class="phone-input">
    <input
      id="user-number"
      name="user-number"
      type="text"
      value=""
      tabindex="-1"
    />
  </div>

  <button class="btn--primary" type="submit">Odeslat</button>
</form>

<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<style>
  .submit-form {
    --border-color: var(--clr-primary-400);
    --border-radius: 20px;

    max-width: 500px;
    align-self: center;
  }

  .flow {
    gap: 0.75rem;
  }

  input:not([type='checkbox']),
  textarea,
  select {
    font: inherit;
    background-color: transparent;
    border: none;
    outline: none;
    padding: 0.75rem 1rem;
    width: 100%;
  }

  textarea,
  select {
    width: calc(100% - 10px);
  }

  .input-group {
    display: grid;
    grid-template-columns: 1fr;
    gap: 0.75rem 0;
  }

  .input-item {
    overflow: hidden;
    background-color: var(--clr-neutral-100);
    border: 2px solid var(--border-color);
    border-radius: var(--border-radius);
  }

  input:focus::placeholder {
    color: var(--clr-primary-400);
  }

  #service-select {
    padding: calc(0.75rem - 1px) calc(1rem - 4px);
  }

  .subscribe {
    display: flex;
    gap: 0.5em;
    align-items: center;
    font-size: 0.9rem;
  }

  input[type='checkbox'] {
    appearance: none;
    display: flex;
    align-items: center;
    justify-content: center;
    accent-color: var(--clr-primary-400);
    min-width: 1.25rem;
    min-height: 1.25rem;
    background-color: var(--clr-neutral-100);
    border-radius: 5px;
    border: 2px solid var(--border-color);
    transition: background-color 150ms;
  }

  input[type='checkbox']:hover:not(:checked) {
    background-color: var(--clr-neutral-200);
  }

  input[type='checkbox']:checked {
    background-color: var(--clr-primary-400);
  }

  input[type='checkbox']::after {
    content: url('../assets/images/check.svg');
    display: inline-block;
    width: 0.85em;
    height: 0.85em;
    transform: scale(0);
    transition: transform 150ms;
  }

  input[type='checkbox']:checked::after {
    transform: scale(1);
  }

  @media only screen and (min-width: 801px) {
    .input-group {
      grid-template-columns: 2fr 3fr;
    }
    .input-group .input-item:first-of-type {
      position: relative;
      border: 2px solid var(--border-color);
      border-right: none;
      border-radius: var(--border-radius) 0 0 var(--border-radius);
    }

    .input-group .input-item:last-of-type {
      border: 2px solid var(--border-color);
      border-left: none;
      border-radius: 0 var(--border-radius) var(--border-radius) 0;
    }

    .input-group .input-item:first-of-type::after {
      content: '';
      position: absolute;
      bottom: 5px;
      top: 5px;
      right: 0;
      width: 2px;
      background-color: var(--border-color);
    }

    button[type='submit'] {
      align-self: flex-start;
      width: 200px;
    }
  }
</style>

<script>
  const dateLocationElement = document.getElementById('date-location-group');
  const selectElement = document.getElementById(
    'service-select'
  ) as HTMLSelectElement;

  selectElement?.addEventListener('change', () => {
    if (selectElement.value === 'zadny') hideInputs();
    else showInputs();
  });

  const urlSearchParams = new URLSearchParams(window.location.search);
  const program = urlSearchParams.get('p');

  selectElement.value = program ?? 'zadny';
  if (selectElement.value !== 'zadny') showInputs();

  function hideInputs() {
    if (dateLocationElement) dateLocationElement.style.display = 'none';
  }

  function showInputs() {
    if (dateLocationElement) dateLocationElement.style.display = '';
  }
</script>

<script is:inline define:vars={{ reservedDates }}>
  const today = new Date();
  const threeDaysFromNow = new Date(today);
  threeDaysFromNow.setDate(today.getDate() + 3);

  const todayNextYear = new Date(today);
  todayNextYear.setFullYear(today.getFullYear() + 1);

  document.addEventListener('DOMContentLoaded', function () {
    flatpickr('#datepicker', {
      disable: reservedDates,
      disableMobile: 'true',
      dateFormat: 'Y-m-d',
      minDate: threeDaysFromNow,
      maxDate: todayNextYear,
    });
  });

  const formElement = document.querySelector('.submit-form');
  formElement.addEventListener('submit', (e) => {
    e.preventDefault();

    const formData = new FormData(e.currentTarget);
    if (!isInputValid(formData)) {
      return;
    }
    submitForm(formData);
  });

  function isInputValid(input) {
    let isValid = true;

    if (input.get('user-number') !== '') {
      // Handle bots
      isValid = false;
    }
    return isValid;
  }

  async function submitForm(formData) {
    const url = '/api/kontakt';
    const response = await fetch(url, {
      method: 'POST',
      body: formData,
    });
    if (response.ok) {
      fireSubmitEvent();
      formElement.reset();
    } else {
      const errorData = await response.json();
      console.error(response.status, errorData.error);
    }
  }

  function fireSubmitEvent() {
    try {
      gtag('event', 'form_submit');
    } catch (error) {
      console.warn('Submit event failed:', error);
    }
  }
</script>

<style>
  .phone-input {
    position: absolute;
    left: -5000px;
  }
</style>

<style is:inline>
  .flatpickr-day:not(.flatpickr-disabled)::after {
    --underline-width: 15px;
    content: '';
    display: inline-block;
    position: absolute;
    left: calc(50% - var(--underline-width) / 2);
    bottom: calc(var(--underline-width) / 2);
    width: var(--underline-width);
    height: 1px;
    background-color: var(--clr-primary-400);
  }
</style>
